{"version":3,"sources":["Components/ThreeDWorld.js","Components/TheeHeader.js","App.js","reportWebVitals.js","index.js"],"names":["scene","camera","renderer","cube","Navigation","style","textAlign","animate","requestAnimationFrame","rotation","x","y","render","ThreeDWorld","THREE","background","window","innerWidth","innerHeight","setSize","geometry","material","color","wireframe","add","position","z","useEffect","document","getElementById","appendChild","domElement","id","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"oHAGIA,EAAOC,EAAQC,EAAUC,E,uCCOdC,EARI,WACf,OACI,qBAAKC,MAAO,CAACC,UAAW,UAAxB,SACI,+C,OD+BNC,EAAU,SAAVA,IACFC,sBAAsBD,GAEtBJ,EAAKM,SAASC,GAAK,IACnBP,EAAKM,SAASE,GAAK,IAEnBT,EAASU,OAAOZ,EAAOC,IAGZY,EAxCK,YAEhBb,EAAQ,IAAIc,KACNC,WAAa,IAAID,IAAY,SAEnCb,EAAS,IAAIa,IACT,GACAE,OAAOC,WAAWD,OAAOE,cAG7BhB,EAAW,IAAIY,KACNK,QAAQH,OAAOC,WAAYD,OAAOE,aAE3C,IAAIE,EAAW,IAAIN,IAAmB,EAAG,EAAG,GACxCO,EAAW,IAAIP,IAAyB,CAACQ,MAAO,MAAUC,WAAW,IAYzE,OAXApB,EAAO,IAAIW,IAAYM,EAAUC,GACjCrB,EAAMwB,IAAKrB,GAEXF,EAAOwB,SAASC,EAAI,EAEpBC,qBAAU,WACNC,SAASC,eAAe,SAASC,YAAY5B,EAAS6B,eAG1DxB,IAGI,qBAAKyB,GAAG,WEnBDC,MATf,WACE,OACE,sBAAKC,UAAU,MAAf,UACI,cAAC,EAAD,IACC,cAAC,EAAD,QCIMC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAAShC,OACP,cAAC,IAAMiC,WAAP,UACE,cAAC,EAAD,MAEFjB,SAASC,eAAe,SAM1BM,M","file":"static/js/main.7d4e79c6.chunk.js","sourcesContent":["import React, {useEffect} from 'react';\r\nimport * as THREE from 'three'\r\n\r\nlet scene, camera, renderer, cube\r\n\r\nconst ThreeDWorld = () => {\r\n\r\n    scene = new THREE.Scene();\r\n    scene.background = new THREE.Color(0x2a3b4c)\r\n\r\n    camera = new THREE.PerspectiveCamera(\r\n        75,\r\n        window.innerWidth/window.innerHeight\r\n    )\r\n\r\n    renderer = new THREE.WebGLRenderer()\r\n    renderer.setSize(window.innerWidth, window.innerHeight)\r\n\r\n    let geometry = new THREE.BoxGeometry( 1, 1, 1 );\r\n    let material = new THREE.MeshBasicMaterial( {color: 0x00ff00, wireframe: true} );\r\n    cube = new THREE.Mesh( geometry, material );\r\n    scene.add( cube );\r\n\r\n    camera.position.z = 5\r\n\r\n    useEffect(() => {\r\n        document.getElementById(\"World\").appendChild(renderer.domElement)\r\n    })\r\n\r\n    animate()\r\n\r\n    return ( \r\n        <div id=\"World\"></div>\r\n     );\r\n}\r\n\r\nconst animate = () => {\r\n    requestAnimationFrame(animate)\r\n\r\n    cube.rotation.x += 0.01\r\n    cube.rotation.y += 0.01\r\n\r\n    renderer.render(scene, camera)\r\n}\r\n \r\nexport default ThreeDWorld;","import React from 'react';\r\n\r\nconst Navigation = () => {\r\n    return ( \r\n        <div style={{textAlign: 'center'}}>\r\n            <h1>Hello Cube</h1>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Navigation;","import React from 'react';\nimport ThreeHeader from './Components/TheeHeader'\nimport ThreeDWorld from './Components/ThreeDWorld'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <ThreeHeader></ThreeHeader>\n         <ThreeDWorld></ThreeDWorld>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}